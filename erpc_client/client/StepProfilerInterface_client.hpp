/*
 * Generated by erpcgen 1.12.0 on Sat Jun  8 13:47:25 2024.
 *
 * AUTOGENERATED - DO NOT EDIT
 */


#if !defined(_StepProfilerInterface_client_hpp_)
#define _StepProfilerInterface_client_hpp_

#include "StepProfilerInterface_interface.hpp"

#include "erpc_client_manager.h"

namespace erpcShim
{

class StepProfiler_client: public StepProfiler_interface
{
    public:
        StepProfiler_client(erpc::ClientManager *manager);

        virtual ~StepProfiler_client();

        virtual void Z_Home(void);

        virtual void Y_Home(void);

        virtual void Z_Run(int32_t dir);

        virtual void Y_Run(int32_t dir);

        virtual void setForce(int32_t force);

        virtual int32_t getLVDTStatus(void);

        virtual void getLVDTFreq(lvdtFreqData * data, int32_t preCount, int32_t postCount);

    protected:
        erpc::ClientManager *m_clientManager;
};

class StylusProfiler_client: public StylusProfiler_interface
{
    public:
        StylusProfiler_client(erpc::ClientManager *manager);

        virtual ~StylusProfiler_client();

        virtual void MotorRun(uint8_t _motorId, uint8_t _runType, uint8_t _runDir);

        virtual void MotorStop(uint8_t _motorId);

        virtual uint8_t GetMotorRunSetStatus(uint8_t _motorId);

        virtual uint8_t GetMotorStopSetStatus(uint8_t _motorId);

        virtual void MotorZero(uint8_t _motorId);

        virtual uint8_t GetMotorZeroStatus(uint8_t _motorId);

        virtual void LineCtrl(uint16_t _value);

        virtual void AmplifierTypeSwitch(uint8_t _type);

        virtual void SingalCheckSwitch(uint8_t _ctrl);

        virtual void DataTx2PcSwitch(uint8_t _ctrl);

    protected:
        erpc::ClientManager *m_clientManager;
};

} // erpcShim


#endif // _StepProfilerInterface_client_hpp_
