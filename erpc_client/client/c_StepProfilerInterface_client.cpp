/*
 * Generated by erpcgen 1.12.0 on Wed Sep  4 13:11:29 2024.
 *
 * AUTOGENERATED - DO NOT EDIT
 */


#include "c_StepProfilerInterface_client.h"
#include "StepProfilerInterface_client.hpp"
#include "erpc_manually_constructed.hpp"
#include "erpc_client_setup.h"
#include "erpc_port.h"

using namespace erpc;
using namespace std;
using namespace erpcShim;



#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
StepProfiler_client *s_StepProfiler_client = nullptr;
#else
ERPC_MANUALLY_CONSTRUCTED_STATIC(StepProfiler_client, s_StepProfiler_client);
#endif
#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
StylusProfiler_client *s_StylusProfiler_client = nullptr;
#else
ERPC_MANUALLY_CONSTRUCTED_STATIC(StylusProfiler_client, s_StylusProfiler_client);
#endif

static erpc_transport_t transport = nullptr;
static erpc_mbf_t erpc_mbf_dynamic = nullptr;
static erpc_client_t client = nullptr;

int32_t InitInstance(const char * host, uint16_t port)
{
    int32_t result = 0;
    if (host == nullptr) return -1;
    transport = erpc_transport_tcp_init(host, port, 0);
    if (transport) result = 1; else return -2;
    erpc_mbf_dynamic = erpc_mbf_dynamic_init();
    if (erpc_mbf_dynamic) result += 10; else return -3;
    client = erpc_client_init(transport, erpc_mbf_dynamic);
    if (client) result += 100; else return -4;
    initStepProfiler_client(client);
    initStylusProfiler_client(client);
    return result;
}

int32_t ExitInstance()
{
    deinitStepProfiler_client();
    deinitStylusProfiler_client();
    if (client) erpc_client_deinit(client);
    if (erpc_mbf_dynamic) erpc_mbf_dynamic_deinit(erpc_mbf_dynamic);
    if (transport) erpc_transport_tcp_close(transport);
    return 0;
}

void Z_Home(void)
{
    s_StepProfiler_client->Z_Home();
}

void Y_Home(void)
{
    s_StepProfiler_client->Y_Home();
}

void Z_Run(int32_t dir)
{
    s_StepProfiler_client->Z_Run(dir);
}

void Y_Run(int32_t dir)
{
    s_StepProfiler_client->Y_Run(dir);
}

void setForce(int32_t force)
{
    s_StepProfiler_client->setForce(force);
}

int32_t getLVDTStatus(void)
{
    int32_t result;
    result = s_StepProfiler_client->getLVDTStatus();

    return result;
}

void getLVDTFreq(lvdtFreqData * data, int32_t preCount, int32_t postCount)
{
    s_StepProfiler_client->getLVDTFreq(data, preCount, postCount);
}

void MotorRun(uint8_t _motorId, uint8_t _runType, uint8_t _runDir)
{
    s_StylusProfiler_client->MotorRun(_motorId, _runType, _runDir);
}

void MotorStop(uint8_t _motorId)
{
    s_StylusProfiler_client->MotorStop(_motorId);
}

uint8_t GetMotorRunSetStatus(uint8_t _motorId)
{
    uint8_t result;
    result = s_StylusProfiler_client->GetMotorRunSetStatus(_motorId);

    return result;
}

uint8_t GetMotorStopSetStatus(uint8_t _motorId)
{
    uint8_t result;
    result = s_StylusProfiler_client->GetMotorStopSetStatus(_motorId);

    return result;
}

void MotorZero(uint8_t _motorId)
{
    s_StylusProfiler_client->MotorZero(_motorId);
}

uint8_t GetMotorZeroStatus(uint8_t _motorId)
{
    uint8_t result;
    result = s_StylusProfiler_client->GetMotorZeroStatus(_motorId);

    return result;
}

void LineCtrl(uint16_t _value)
{
    s_StylusProfiler_client->LineCtrl(_value);
}

void AmplifierTypeSwitch(uint8_t _type)
{
    s_StylusProfiler_client->AmplifierTypeSwitch(_type);
}

void SingalCheckSwitch(uint8_t _ctrl)
{
    s_StylusProfiler_client->SingalCheckSwitch(_ctrl);
}

void DataTx2PcSwitch(uint8_t _ctrl)
{
    s_StylusProfiler_client->DataTx2PcSwitch(_ctrl);
}

void PwrOn(void)
{
    s_StylusProfiler_client->PwrOn();
}

void PwrOff(void)
{
    s_StylusProfiler_client->PwrOff();
}

void TowerDown(void)
{
    s_StylusProfiler_client->TowerDown();
}

void TowerUp(void)
{
    s_StylusProfiler_client->TowerUp();
}

void TowerHome(void)
{
    s_StylusProfiler_client->TowerHome();
}

void UnloadSample(void)
{
    s_StylusProfiler_client->UnloadSample();
}

void LoadSample(void)
{
    s_StylusProfiler_client->LoadSample();
}

void GetSysStatus(sysStatus * data)
{
    s_StylusProfiler_client->GetSysStatus(data);
}

void SAStop(sAStopType _flag)
{
    s_StylusProfiler_client->SAStop(_flag);
}

void SingleAcquisition(float _sample, float _speed, float _length, float _duration, float _resolution, sAStartType _flag)
{
    s_StylusProfiler_client->SingleAcquisition(_sample, _speed, _length, _duration, _resolution, _flag);
}

void initStepProfiler_client(erpc_client_t client)
{
#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
    erpc_assert(s_StepProfiler_client == nullptr);
    s_StepProfiler_client = new StepProfiler_client(reinterpret_cast<ClientManager *>(client));
#else
    erpc_assert(!s_StepProfiler_client.isUsed());
    s_StepProfiler_client.construct(reinterpret_cast<ClientManager *>(client));
#endif
}

void deinitStepProfiler_client(void)
{
#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
    if (s_StepProfiler_client != nullptr)
    {
        delete s_StepProfiler_client;
        s_StepProfiler_client = nullptr;
    }
#else
    s_StepProfiler_client.destroy();
#endif
}

void initStylusProfiler_client(erpc_client_t client)
{
#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
    erpc_assert(s_StylusProfiler_client == nullptr);
    s_StylusProfiler_client = new StylusProfiler_client(reinterpret_cast<ClientManager *>(client));
#else
    erpc_assert(!s_StylusProfiler_client.isUsed());
    s_StylusProfiler_client.construct(reinterpret_cast<ClientManager *>(client));
#endif
}

void deinitStylusProfiler_client(void)
{
#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
    if (s_StylusProfiler_client != nullptr)
    {
        delete s_StylusProfiler_client;
        s_StylusProfiler_client = nullptr;
    }
#else
    s_StylusProfiler_client.destroy();
#endif
}
